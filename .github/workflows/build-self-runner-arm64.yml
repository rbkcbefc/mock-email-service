name: Build & Push Docker images on Self Runner for ARM Architectures to the AWS ECR Repo
# Note: The Docker image is tagged w/ suffix: arm64

on:
  push:
    branches:
      - master
jobs:
    Build:
      name: Build
      runs-on: self-hosted
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Build project with Maven
          run: mvn -B package --file pom.xml            

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Get commit hash
          id: get-commit-hash
          run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
    
        - name: Get timestamp
          id: get-timestamp
          run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

        - name: Build, tag, and push the image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
            IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}-arm64
          run: |
            echo "{\"build_tag\":\"$IMAGE_TAG\"}" > build.json
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
        - name: Download task definition
          run: |
            aws ecs describe-task-definition --task-definition mock-email-service-task --query taskDefinition > task-definition.json
            
        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: task-definition.json
            container-name: mock-email-service
            image: ${{ steps.build-image.outputs.image }}
      
        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v2
          with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: mock-email-service
              cluster: test-auto
              wait-for-service-stability: true
              enable-ecs-managed-tags: true
              propagate-tags: SERVICE